[{"path":[]},{"path":"/DEVNOTES.html","id":"adding-functions-to-the-package","dir":"","previous_headings":"","what":"Adding functions to the package","title":"Developer Notes","text":"adding new functions package, roxygen must also updated, new function added (function modified), make sure roxygen skeleton correct run following lines:","code":"devtools::document() devtools::load_all()"},{"path":"/DEVNOTES.html","id":"building-the-package-or-site","dir":"","previous_headings":"","what":"Building the package or site","title":"Developer Notes","text":"building package building articles documentation site, use Install restart option build pane ensure proper build. devtools::build() doesn’t always work well takes much longer.","code":""},{"path":"/DEVNOTES.html","id":"adding-stan-models-or-issues-with-existing-ones","dir":"","previous_headings":"","what":"Adding Stan models or issues with existing ones","title":"Developer Notes","text":"adding new Stan model sometimes modifying existing one, seems necessary run following three lines recompile models: running commands can lead strange behaviour, example rstan::sampling() appeared use old version model rstan::vb() used newer version model.","code":"pkgbuild::compile_dll() roxygen2::roxygenize() devtools::install() # Or maybe try using the build pane instead. Might be quicker and/or better?"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 bisonR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"bisonR R package running social network analyses BISoN framework. BISoN models consist two main stages: 1) fitting edge weight model, capturing uncertainty social network edges; 2) propagating uncertainty subsequent analyses regressions. short tutorial ’ll cover fit edge weight models simulated dataset, show fitted edge weight model can used run dyadic nodal regression analysis. beginning, ’ll load bisonR package using library(bisonR), ’ll also bring dplyr help data wrangling. don’t already bisonR installed, can install Github using following code: also use simulate_edge_model() function bisonR simulate observation data. dataframe example format bisonR uses. row corresponds observation (association within sampling period dyad count interactions dyad), additional observation-level, dyad-level, node-level factors can included.","code":"remotes::install_github(\"JHart96/bisonR\") library(bisonR) #> Loading required package: cmdstanr #> This is cmdstanr version 0.5.2 #> - CmdStanR documentation and vignettes: mc-stan.org/cmdstanr #> - CmdStan path: /home/runner/.cmdstan/cmdstan-2.29.2 #> - CmdStan version: 2.29.2 #> Loading required package: igraph #>  #> Attaching package: 'igraph' #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:igraph': #>  #>     as_data_frame, groups, union #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union sim_data <- simulate_edge_model(\"binary\", aggregated = FALSE) df <- sim_data$df_sim head(df) #>   event node_1_id node_2_id age_diff    age_1    age_2 location duration #> 1     0         1         2 2.712711 21.85628 19.14357        3        1 #> 2     0         1         2 2.712711 21.85628 19.14357        3        1 #> 3     1         1         2 2.712711 21.85628 19.14357        2        1 #> 4     1         1         2 2.712711 21.85628 19.14357        4        1 #> 5     1         1         2 2.712711 21.85628 19.14357        3        1 #> 6     1         1         2 2.712711 21.85628 19.14357        1        1"},{"path":"/articles/getting_started.html","id":"edge-models","dir":"Articles","previous_headings":"","what":"Edge Models","title":"Getting Started","text":"Depending type data analysed, different edge models used. See explanation bisonR framework details . example ’re using binary data, events can either occur (1) occur (0) particular sampling period. dataframe corresponds event = 1 event = 0. bisonR framework fully Bayesian, therefore specifying priors key part analysis. Priors can tricky set, techniques choosing good priors outside scope tutorial, see resources help choosing priors BISoN. recommend retrieving default priors bisonR using get_default_priors() function get correct set default priors edge weight model. list shows priors set “fixed effect” parameters: edge weights additional fixed effects included edge weight model; “random effect” parameters: additional random effects included edge weight model. Imagine decide normal distribution mean zero standard deviation 1 appropriate fixed effects, ’d prefer standard deviation 2, can change using following code: Now ’ve set priors ’re happy , can fit edge model using edge_model() function. one main functions bisonR package lot functionality. main thing worry define edge weight model formula. formula designed familar used lm, lme4, brms, regression packages. main difference need include measure sampling intensity get accurate estimates edge weight uncertainty. bisonR, left hand side ~ describes sampling data, uses (event | duration) notation. notation, event corresponds name column dataframe represents measure social events, 1 0 binary model, frequencies 0, 1, 2, … count model. using unaggregated dataframe, duration corresponds durations observation. case fixed, depend data hand. right hand side ~ describes predictors associated social events. standard BISoN model primarily edge weight use build network, can also include additional effects age, sex, even observation-level factors location, time day, weather, name . Including additional effects change interpretation edge weights, useful interested social network factors controlled . Note edge weights don’t need included, use bisonR estimate generative effects network. example ’ll keep things simple just use edge weight predictor. done using dyad(node_1_id, node_2_id) notation. node_1_id node_2_id represent nodes corresponding individual network, need stored factors dataframe. don’t need IDs, individual names, long ’re stored factors. Now understand basics formula notation, can now fit edge weight model: Depending dataset can take anywhere tenths second several hours. particular large dataset observation-level predictors, ’s probably good idea use aggregated version model observations per dyad collapsed single row. speed model fitting considerably. model fitted, need check MCMC algorithm behaved correctly. Usually ’s major problem, edge_model() function triggered warning messages . even everything silent, ’s still worth checking traceplots check MCMC chains converged. chains well-mixed look something like fuzzy caterpillar. can check using plot_trace() function:  ’re satisfied MCMC algorithm done job properly, ’s time see true model. One way , among many others, check predictions fitted model real data. can done using plot_predictions() function. real data within ensemble predictions model, little faith model capturing least important properties data. statistical model implies range predictions can extract multiple draws, number can set using num_draws argument.  predictions model shown blue real data shown black. Ideally blue lines distributed around black line, indicating real data among possible predictions model. Now ’ve conducted two basic diagnostic checks edge weight model, can start trust ’s telling us. see summary edge weights credible intervals, can use summary() function: can hard get intuitive idea ’s going looking summary table, can useful visualise network . plot_network() function BISoN edge weight models, uncertainty shown edge weights. Uncertainty visualised showing lower upper bounds overlapping edges network.  Now fitted edge weight model ’re happy , can start look downstream analyses. first ’ll consider dyadic regression.","code":"priors <- get_default_priors(\"binary\") priors #> $edge #> [1] \"normal(0, 2.5)\" #>  #> $fixed #> [1] \"normal(0, 2.5)\" #>  #> $random_mean #> [1] \"normal(0, 1)\" #>  #> $random_std #> [1] \"half-normal(1)\" priors$fixed <- \"normal(0, 2.5)\" priors #> $edge #> [1] \"normal(0, 2.5)\" #>  #> $fixed #> [1] \"normal(0, 2.5)\" #>  #> $random_mean #> [1] \"normal(0, 1)\" #>  #> $random_std #> [1] \"half-normal(1)\" fit_edge <- edge_model(   (event | duration) ~ dyad(node_1_id, node_2_id),    data=df,    data_type=\"binary\",    priors=priors ) #> $prior_edge_mu #> [1] 0 #>  #> $prior_edge_sigma #> [1] 2.5 #>  #> $prior_fixed_mu #> [1] 0 #>  #> $prior_fixed_sigma #> [1] 2.5 #>  #> $prior_random_mean_mu #> [1] 0 #>  #> $prior_random_mean_sigma #> [1] 1 #>  #> $prior_random_std_sigma #> [1] 1 #>  #> Running MCMC with 4 parallel chains... #>  #> Chain 1 finished in 2.7 seconds. #> Chain 3 finished in 2.7 seconds. #> Chain 2 finished in 2.9 seconds. #> Chain 4 finished in 2.8 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 2.8 seconds. #> Total execution time: 3.1 seconds. plot_trace(fit_edge) plot_predictions(fit_edge, num_draws=20) summary(fit_edge) #> === Fitted BISoN edge model === #> Data type: binary #> Formula: (event | duration) ~ dyad(node_1_id, node_2_id) #> Number of nodes: 10 #> Number of dyads: 45 #> Directed: FALSE #> === Edge list summary === #>          median    5%   95% #> 1 <-> 2   0.663 0.341 0.896 #> 1 <-> 3   0.502 0.284 0.720 #> 2 <-> 3   0.040 0.003 0.194 #> 1 <-> 4   0.951 0.726 0.996 #> 2 <-> 4   0.506 0.092 0.913 #> 3 <-> 4   0.979 0.900 0.998 #> 1 <-> 5   0.926 0.782 0.986 #> 2 <-> 5   0.082 0.014 0.253 #> 3 <-> 5   0.817 0.212 0.992 #> 4 <-> 5   0.160 0.046 0.352 #> 1 <-> 6   0.082 0.004 0.433 #> 2 <-> 6   0.021 0.002 0.109 #> 3 <-> 6   0.288 0.125 0.507 #> 4 <-> 6   0.115 0.006 0.577 #> 5 <-> 6   0.202 0.058 0.436 #> 1 <-> 7   0.896 0.426 0.995 #> 2 <-> 7   0.943 0.689 0.996 #> 3 <-> 7   0.969 0.840 0.998 #> 4 <-> 7   0.848 0.691 0.944 #> 5 <-> 7   0.732 0.533 0.881 #> 6 <-> 7   0.950 0.708 0.997 #> 1 <-> 8   0.335 0.130 0.597 #> 2 <-> 8   0.438 0.243 0.637 #> 3 <-> 8   0.645 0.454 0.819 #> 4 <-> 8   0.071 0.014 0.203 #> 5 <-> 8   0.602 0.417 0.765 #> 6 <-> 8   0.810 0.622 0.932 #> 7 <-> 8   0.022 0.002 0.111 #> 1 <-> 9   0.925 0.768 0.987 #> 2 <-> 9   0.666 0.346 0.899 #> 3 <-> 9   0.891 0.421 0.995 #> 4 <-> 9   0.501 0.280 0.724 #> 5 <-> 9   0.944 0.670 0.997 #> 6 <-> 9   0.966 0.806 0.998 #> 7 <-> 9   0.944 0.678 0.997 #> 8 <-> 9   0.932 0.646 0.996 #> 1 <-> 10  0.735 0.346 0.953 #> 2 <-> 10  0.300 0.152 0.482 #> 3 <-> 10  0.876 0.643 0.979 #> 4 <-> 10  0.204 0.075 0.392 #> 5 <-> 10  0.637 0.390 0.838 #> 6 <-> 10  0.977 0.889 0.998 #> 7 <-> 10  0.180 0.008 0.800 #> 8 <-> 10  0.935 0.622 0.997 #> 9 <-> 10  0.085 0.005 0.448 plot_network(fit_edge, lwd=5)"},{"path":"/articles/getting_started.html","id":"dyadic-regression","dir":"Articles","previous_headings":"","what":"Dyadic Regression","title":"Getting Started","text":"Dyadic regression dyadic network properties (usually edge weight) regressed dyad-level properties. case ’ll regressing edge weight difference age, test hypothesis differences age drive social connections. Just like edge weight models, need set priors, can done much way last time: dataframe dyadic regression different one used fit edge weight model. case need row dyad, need index using factor-typed node variables levels used fitting edge weight model. example necessary data original dataframe, can extract using dplyr. dyadic_regression() function uses similar formula syntax edge_model function. example use edge weight, described dyad(node_1_id, node_2_id), left hand side response variable. use age_diff variable dataframe single fixed effect, additional fixed random effects can also included. Note default dyadic regression function uses multi-membership effects, denoted argument mm, capture non-independence due nodes regression. vital feature analyses prevent spurious conclusions, sake simulated data don’t need include effect . Like last time want check model fit properly makes good predictions. can done exactly way last time:   Now can examine regression coefficients using summary(). can interpreted mostly way standard regression, though categories treated differently. See information categories handled bisonR regression functions. Now ’ve seen fit dyadic regression, next common type analysis nodal regression.","code":"priors <- get_default_priors(\"dyadic_regression\") priors$error <- \"half-normal(2.5)\" priors #> $fixed #> [1] \"normal(0, 2.5)\" #>  #> $random_mean #> [1] \"normal(0, 1)\" #>  #> $random_std #> [1] \"half-normal(1)\" #>  #> $multimembership #> [1] \"half-normal(1)\" #>  #> $error #> [1] \"half-normal(2.5)\" df_dyadic <- df %>%   distinct(node_1_id, node_2_id, age_diff)  fit_dyadic <- dyadic_regression(dyad(node_1_id, node_2_id) ~ age_diff, fit_edge, df_dyadic, mm=FALSE, priors=priors) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 2 finished in 3.3 seconds. #> Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 1 finished in 3.4 seconds. #> Chain 3 finished in 3.4 seconds. #> Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 4 finished in 3.4 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 3.4 seconds. #> Total execution time: 3.6 seconds. plot_trace(fit_dyadic) plot_predictions(fit_dyadic, num_draws=20) summary(fit_dyadic) #> === Fitted dyadic regression model === #> Formula: dyad(node_1_id, node_2_id) ~ age_diff #> Number of dyads: 45 #> === Coefficient summary ===                 #> variable            50%     5%   95% #>   intercept      -0.173 -0.479 0.108 #>   fixed_age_diff  0.635  0.519 0.759"},{"path":"/articles/getting_started.html","id":"nodal-regression","dir":"Articles","previous_headings":"","what":"Nodal Regression","title":"Getting Started","text":"Nodal regression node-level network properties, centrality, regressed node-level properties, age. spirit last time need prepare matrix row corresponds node. case can extract original matrix using dplyr: Priors can set exact way dyadic_regression() function: formula syntax nodal regression similar dyadic regression, analysis level node, dyad, longer need dyad(node_1_id, node_2_id) term. Instead want use node-level network metric characterise node positions within network, maintaining uncertainty edge weights. bisonR can handle automatically, simply need specify network metric use. case ’ll use classic measure centrality strength(), many others available. See documentation details. model fitted, need employ diagnostic checks last time ensure model reliable. may seem little tedious, won’t always go smoothly, ’s vital part model fitting essential reliable inferences, even frequentist statistics.   Just like previous example, can now summarise regression coefficients using summary() function:","code":"df_1 <- df %>%    select(node_id=node_1_id, age=age_1) df_2 <- df %>%   select(node_id=node_2_id, age=age_2) df_nodal <- bind_rows(df_1, df_2) %>%   distinct(node_id, age) df_nodal #>    node_id      age #> 1        1 21.85628 #> 2        2 19.14357 #> 3        3 23.02210 #> 4        4 18.52703 #> 5        5 20.58835 #> 6        6 23.40549 #> 7        7 18.45448 #> 8        8 21.18437 #> 9        9 16.73064 #> 10      10 18.86006 priors <- get_default_priors(\"nodal_regression\") priors$error <- \"half-normal(2.5)\" priors #> $fixed #> [1] \"normal(0, 2.5)\" #>  #> $random_mean #> [1] \"normal(0, 1)\" #>  #> $random_std #> [1] \"half-normal(1)\" #>  #> $error #> [1] \"half-normal(2.5)\" fit_nodal <- nodal_regression(strength(node_id) ~ age, fit_edge, df_nodal, priors=priors) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue: #> Chain 2 Exception: multi_normal_lpdf: LDLT_Factor of covariance parameter is not positive definite.  last conditional variance is -nan. (in '/tmp/RtmpvIcdXD/model-387d150e8ff5.stan', line 34, column 2 to column 94) #> Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine, #> Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified. #> Chain 2 #> Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 finished in 1.1 seconds. #> Chain 3 finished in 1.1 seconds. #> Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 2 finished in 1.2 seconds. #> Chain 4 finished in 1.2 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 1.1 seconds. #> Total execution time: 1.3 seconds. plot_trace(fit_nodal) plot_predictions(fit_nodal, num_draws=20) summary(fit_nodal) #> === Fitted nodal regression model === #> Formula: strength(node_id) ~ age #> Number of nodes: 10 #> === Coefficient summary ===            #> variable       50%     5%   95% #>   intercept  0.669 -2.637 3.697 #>   fixed_age -0.035 -0.186 0.131"},{"path":"/articles/getting_started.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting Started","text":"brief introduction bisonR package, hope useful. R package many features shown , package constant development. welcome feedback criticism. hope find package useful, happy social network analysis!","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jordan Hart. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hart J (2022). bisonR: Bayesian Inference Social Networks R. https://github.com/JHart96/bisonR, https://jhart96.github.io/bisonR/.","code":"@Manual{,   title = {bisonR: Bayesian Inference of Social Networks in R},   author = {Jordan Hart},   year = {2022},   note = {https://github.com/JHart96/bisonR, https://jhart96.github.io/bisonR/}, }"},{"path":"/index.html","id":"bisonr---an-r-package-for-bayesian-inference-of-social-networks-","dir":"","previous_headings":"","what":"BISoN R Package","title":"BISoN R Package","text":"⚠️ use package! (yet): package still early stages development ready real use. ’re looking use BISoN social network analysis check examples repository Stan INLA : github.com/JHart96/bison_examples. bisonR R package implementing BISoN framework conducting Bayesian analysis social networks. BISoN estimates uncertainty edge weights social networks empirical data (observations) builds networks uncertainty. networks can visualised uncertainty, can also analysed fully Bayesian methodology using standard tools regression.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"BISoN R Package","text":"cmdstanR needs installed bisonR package work. install cmdstanR, follow instructions https://mc-stan.org/cmdstanr/, run cmdstanr::install_cmdstan(). bisonR isn’t currently CRAN, can installed GitHub. , make sure remotes package installed. run following command:","code":"remotes::install_github(\"JHart96/bisonR\")"},{"path":"/reference/bisonR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'bisonR' package. — bisonR-package","title":"The 'bisonR' package. — bisonR-package","text":"R package Bayesian Inference Social Networks","code":""},{"path":"/reference/bisonR-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The 'bisonR' package. — bisonR-package","text":"Stan Development Team (2021). RStan: R interface Stan. R package version 2.21.3. https://mc-stan.org","code":""},{"path":"/reference/draw_edgelist_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw samples from edgelist posterior — draw_edgelist_samples","title":"Draw samples from edgelist posterior — draw_edgelist_samples","text":"Draw samples edgelist posterior","code":""},{"path":"/reference/draw_edgelist_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw samples from edgelist posterior — draw_edgelist_samples","text":"","code":"draw_edgelist_samples(obj, num_draws)"},{"path":"/reference/draw_edgelist_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw samples from edgelist posterior — draw_edgelist_samples","text":"obj S3 edge model object summarised. num_draws Number sample distributions draw posterior.","code":""},{"path":"/reference/draw_edgelist_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw samples from edgelist posterior — draw_edgelist_samples","text":"data.frame sample draws posteriors, column corresponds posterior draw.","code":""},{"path":"/reference/draw_node_metric_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","title":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","text":"Draw samples posterior node metric fitted edge weight model","code":""},{"path":"/reference/draw_node_metric_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","text":"","code":"draw_node_metric_samples(   obj,   metric_name,   num_draws = 1000,   standardise = TRUE )"},{"path":"/reference/draw_node_metric_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","text":"metric_name","code":""},{"path":[]},{"path":"/reference/dyadic_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit dyadic regression model — dyadic_regression","title":"Fit dyadic regression model — dyadic_regression","text":"Fit dyadic regression model","code":""},{"path":"/reference/dyadic_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit dyadic regression model — dyadic_regression","text":"","code":"dyadic_regression(   formula,   edgemodel,   df,   mc_cores = 4,   refresh = 500,   mm = TRUE,   priors = NULL )"},{"path":"/reference/dyadic_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit dyadic regression model — dyadic_regression","text":"formula Formula model edgemodel Fitted edge weight model df Dataframe regression mc_cores Number cores use MCMC sampler refresh Frequency print-outs MCMC sampler mm TRUE/FALSE indicating whether include multi-membership effects regression","code":""},{"path":"/reference/dyadic_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit dyadic regression model — dyadic_regression","text":"Fitted dyadic regression model object","code":""},{"path":"/reference/edge_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an edge model to data — edge_model","title":"Fit an edge model to data — edge_model","text":"Fit edge model data","code":""},{"path":"/reference/edge_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an edge model to data — edge_model","text":"","code":"edge_model(   formula,   data,   data_type = c(\"binary\", \"count\"),   directed = FALSE,   priors = NULL,   refresh = 0,   mc_cores = 4 )"},{"path":"/reference/edge_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an edge model to data — edge_model","text":"formula Formula specifying social events sampling effort LHS edge weights, fixed, random effects RHS. data Aggregated disaggregated dataframe dyadic observations. data_type \"binary\", \"count\", \"duration\", specifying type edge weight model use. directed TRUE FALSE specifying whether network directed . priors List priors format supplied get_default_priors(). refresh Frequency messages printed running sampler. mc_cores Number cores use running sampler.","code":""},{"path":"/reference/edge_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an edge model to data — edge_model","text":"S3 edge model object containing edge samples processed data.","code":""},{"path":"/reference/edge_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an edge model to data — edge_model","text":"Fits BISoN edge weight model user-provided dataframe. function supports either aggregated (dyad-level) disaggregated (observation-level) dataframes. Node names IDs need formatted factors levels. type edge model interpretation edge weights used depends data_type, change interpretation edge weights.","code":""},{"path":"/reference/get_contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate contrasts between parameters — get_contrasts","title":"Calculate contrasts between parameters — get_contrasts","text":"Calculate contrasts parameters","code":""},{"path":"/reference/get_contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate contrasts between parameters — get_contrasts","text":"","code":"get_contrasts(obj, parameter_1, parameter_2, ci = 0.9)"},{"path":"/reference/get_contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate contrasts between parameters — get_contrasts","text":"obj","code":""},{"path":[]},{"path":"/reference/get_default_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Return default priors for a given model — get_default_priors","title":"Return default priors for a given model — get_default_priors","text":"Return default priors given model","code":""},{"path":"/reference/get_default_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return default priors for a given model — get_default_priors","text":"","code":"get_default_priors(model_type)"},{"path":"/reference/get_default_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return default priors for a given model — get_default_priors","text":"model_type","code":""},{"path":[]},{"path":"/reference/get_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","title":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","text":"Retrieves edgelist uncertainty fitted edge weight model object","code":""},{"path":"/reference/get_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","text":"","code":"get_edgelist(obj, ci = 0.9, transform = TRUE)"},{"path":"/reference/get_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","text":"obj S3 edge model object. ci Credible interval use summary, based quantiles. transform TRUE FALSE specifying whether transform edge weights internal link function scale.","code":""},{"path":"/reference/get_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","text":"data.frame object columns node IDs, median, lower, upper bounds.","code":""},{"path":"/reference/nodal_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nodel regression model — nodal_regression","title":"Fit a nodel regression model — nodal_regression","text":"Fit nodel regression model","code":""},{"path":"/reference/nodal_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nodel regression model — nodal_regression","text":"","code":"nodal_regression(   formula,   edgemodel,   df,   mc_cores = 4,   refresh = 500,   priors = NULL )"},{"path":"/reference/nodal_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nodel regression model — nodal_regression","text":"mc_cores","code":""},{"path":[]},{"path":"/reference/plot_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Sociogram plot with uncertainty of a fitted edge weight model object — plot_network","title":"Sociogram plot with uncertainty of a fitted edge weight model object — plot_network","text":"Sociogram plot uncertainty fitted edge weight model object","code":""},{"path":"/reference/plot_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sociogram plot with uncertainty of a fitted edge weight model object — plot_network","text":"","code":"plot_network(obj, ci = 0.9, lwd = 1, ciwd = 10)"},{"path":"/reference/plot_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sociogram plot with uncertainty of a fitted edge weight model object — plot_network","text":"obj S3 edge model object summarised.","code":""},{"path":"/reference/plot_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior predictive checks — plot_predictions","title":"Posterior predictive checks — plot_predictions","text":"Posterior predictive checks","code":""},{"path":"/reference/plot_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior predictive checks — plot_predictions","text":"","code":"plot_predictions(obj, ...)"},{"path":"/reference/plot_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior predictive checks — plot_predictions","text":"obj","code":""},{"path":[]},{"path":"/reference/plot_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Traceplot of MCMC chains — plot_trace","title":"Traceplot of MCMC chains — plot_trace","text":"Traceplot MCMC chains","code":""},{"path":"/reference/plot_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traceplot of MCMC chains — plot_trace","text":"","code":"plot_trace(obj, ...)"},{"path":"/reference/plot_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Traceplot of MCMC chains — plot_trace","text":"...","code":""},{"path":[]},{"path":"/reference/print.dyadic_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about a fitted dyadic regression model — print.dyadic_model","title":"Print information about a fitted dyadic regression model — print.dyadic_model","text":"Print information fitted dyadic regression model","code":""},{"path":"/reference/print.dyadic_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about a fitted dyadic regression model — print.dyadic_model","text":"","code":"# S3 method for dyadic_model print(obj)"},{"path":"/reference/print.dyadic_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information about a fitted dyadic regression model — print.dyadic_model","text":"obj","code":""},{"path":[]},{"path":"/reference/print.edge_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints out details of a fitted edge model object — print.edge_model","title":"Prints out details of a fitted edge model object — print.edge_model","text":"Prints details fitted edge model object","code":""},{"path":"/reference/print.edge_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints out details of a fitted edge model object — print.edge_model","text":"","code":"# S3 method for edge_model print(object, ci = 0.9, transform = TRUE)"},{"path":"/reference/print.edge_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints out details of a fitted edge model object — print.edge_model","text":"ci Credible interval use summary, based quantiles. transform TRUE FALSE specifying whether transform edge weights internal link function scale. obj S3 edge model object.","code":""},{"path":"/reference/print.nodal_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about a fitted nodal regression model — print.nodal_model","title":"Print information about a fitted nodal regression model — print.nodal_model","text":"Print information fitted nodal regression model","code":""},{"path":"/reference/print.nodal_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about a fitted nodal regression model — print.nodal_model","text":"","code":"# S3 method for nodal_model print(obj)"},{"path":"/reference/print.nodal_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information about a fitted nodal regression model — print.nodal_model","text":"obj","code":""},{"path":[]},{"path":"/reference/simulate_edge_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates observations from an edge model — simulate_edge_model","title":"Simulates observations from an edge model — simulate_edge_model","text":"Simulates observations edge model","code":""},{"path":"/reference/simulate_edge_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates observations from an edge model — simulate_edge_model","text":"","code":"simulate_edge_model(   model_type,   aggregated,   location_effect = TRUE,   age_diff_effect = TRUE )"},{"path":[]},{"path":"/reference/summary.dyadic_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a fitted dyadic regression model — summary.dyadic_model","title":"Summary of a fitted dyadic regression model — summary.dyadic_model","text":"Summary fitted dyadic regression model","code":""},{"path":"/reference/summary.dyadic_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a fitted dyadic regression model — summary.dyadic_model","text":"","code":"# S3 method for dyadic_model summary(obj)"},{"path":"/reference/summary.dyadic_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a fitted dyadic regression model — summary.dyadic_model","text":"obj","code":""},{"path":[]},{"path":"/reference/summary.edge_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarises a fitted edge model object — summary.edge_model","title":"Summarises a fitted edge model object — summary.edge_model","text":"Summarises fitted edge model object","code":""},{"path":"/reference/summary.edge_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarises a fitted edge model object — summary.edge_model","text":"","code":"# S3 method for edge_model summary(object, ...)"},{"path":"/reference/summary.edge_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarises a fitted edge model object — summary.edge_model","text":"object S3 edge model object summarised. ... Additional arguments passed print.edge_model().","code":""},{"path":"/reference/summary.nodal_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a fitted nodal regression model — summary.nodal_model","title":"Summary of a fitted nodal regression model — summary.nodal_model","text":"Summary fitted nodal regression model","code":""},{"path":"/reference/summary.nodal_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a fitted nodal regression model — summary.nodal_model","text":"","code":"# S3 method for nodal_model summary(obj)"},{"path":"/reference/summary.nodal_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a fitted nodal regression model — summary.nodal_model","text":"obj","code":""},{"path":[]},{"path":"/news/index.html","id":"bisonr-0009000","dir":"Changelog","previous_headings":"","what":"bisonR 0.0.0.9000","title":"bisonR 0.0.0.9000","text":"Initialised package.","code":""}]
