[{"path":"bisonR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 bisonR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"bisonR/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"bisonR R package running social network analyses BISoN framework. BISoN models consist two main stages: 1) fitting edge weight model, capturing uncertainty social network edges; 2) propagating uncertainty subsequent analyses regressions. short tutorial ’ll cover fit edge weight models simulated dataset, show fitted edge weight model can used run dyadic nodal regression analysis, well non-random edge weight tests. beginning, ’ll load bisonR package using library(bisonR), ’ll also bring dplyr help data wrangling. don’t already bisonR installed, can install Github using following code: use simulate_edge_model() function bisonR simulate observation data. dataframe example format bisonR uses. row corresponds observation (association within sampling period dyad count interactions dyad). Additional observation-level, dyad-level, node-level factors can also included.","code":"remotes::install_github(\"JHart96/bisonR\") library(bisonR) #> Loading required package: cmdstanr #> This is cmdstanr version 0.5.3 #> - CmdStanR documentation and vignettes: mc-stan.org/cmdstanr #> - CmdStan path: /home/runner/.cmdstan/cmdstan-2.30.1 #> - CmdStan version: 2.30.1 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union sim_data <- simulate_edge_model(\"binary\", aggregated = FALSE) df <- sim_data$df_sim head(df) #>   event node_1_id node_2_id age_diff   age_1    age_2 location duration #> 1     1         1         2 5.388522 21.2809 15.89238        3        1 #> 2     1         1         2 5.388522 21.2809 15.89238        4        1 #> 3     1         1         2 5.388522 21.2809 15.89238        4        1 #> 4     1         1         3 5.862090 21.2809 15.41881        4        1 #> 5     1         1         3 5.862090 21.2809 15.41881        1        1 #> 6     1         1         3 5.862090 21.2809 15.41881        4        1"},{"path":"bisonR/articles/getting_started.html","id":"edge-models","dir":"Articles","previous_headings":"","what":"Edge Models","title":"Getting Started","text":"Depending type data analysed, different edge models used. See BISoN introduction vignette details . example ’re using binary data, events can either occur (1) occur (0) particular sampling period. dataframe corresponds event = 1 event = 0. bisonR framework fully Bayesian, therefore specifying priors key part analysis. Priors can tricky set, techniques choosing good priors outside scope tutorial. can see priors need set particular model using get_default_priors() function. defaults almost always changed. priors object gives list priors parameters edge model: edge weights, additional fixed effects, random effect parameters. prior_check() function can used plot prior distributions, ’ll use check ’re happy priors:  priors encode prior beliefs likely values parameters. demonstration purposes let’s say expect edge weights concentrated lower, towards zero. can modify priors edge weight like :  Depending biology, might like want see. Now ’ve set priors ’re happy , can fit edge model using edge_model() function. one main functions bisonR package lot functionality. main thing worry define edge weight model formula. formula designed familar used lm, lme4, brms, regression packages. main difference need include measure observation effort get accurate estimates edge weight uncertainty. bisonR, left hand side ~ describes sampling data, uses (event | duration) notation. notation, event corresponds name column dataframe represents measure social events, 1 0 binary model, frequencies 0, 1, 2, … count model. using unaggregated dataframe, duration corresponds durations observation. case fixed, depend data hand. right hand side ~ describes predictors associated social events. standard BISoN model primarily edge weight use build network, can also include additional effects age, sex, even observation-level factors location, time day, weather, name . Including additional effects change interpretation edge weights, useful interested social network factors controlled . Note edge weights don’t need included, use bisonR estimate generative effects network. example ’ll keep things simple just use edge weight predictor. done using dyad(node_1_id, node_2_id) notation. node_1_id node_2_id represent nodes corresponding individual network, need stored factors dataframe. don’t need IDs, individual names, long ’re stored factors. Now understand basics formula notation, can now fit edge weight model: Depending dataset can take anywhere tenths second several hours. particular large dataset observation-level predictors, ’s probably good idea use aggregated version model observations per dyad collapsed single row. speed model fitting considerably. model fitted, need check MCMC algorithm behaved correctly. Often ’s major problem, edge_model() function triggered warning messages . even everything silent, ’s still worth checking traceplots check MCMC chains converged. chains well-mixed look something like fuzzy caterpillar. can check using plot_trace() function:  ’re satisfied MCMC algorithm done job properly, ’s time see true model. One way , among many others, check predictions fitted model real data. can done using plot_predictions() function. real data within ensemble predictions model, little faith model capturing least important properties data. statistical model implies range predictions can extract multiple draws, number can set using num_draws argument.  predictions model shown blue real data shown black. Ideally blue lines distributed around black line, indicating real data among possible predictions model. ’s usually good idea run multiple predictive checks ensure model captured various important characteristics data. Another type check supported bisonR comparison point estimates edge weights:  plot shows BISoN estimates denoted interval, 90% probability interval shown thin line, 50% probability interval shown thicker blue line. see roughly linear relationship point estimates BISoN estimates, though extremes BISoN estimates likely less extreme unless sufficient data. design, BISoN uses full probabilistic model social events generate estimates, sceptical extreme values without sufficient evidence. Now ’ve conducted two basic diagnostic checks edge weight model, can start trust ’s telling us. see summary edge weights credible intervals, can use summary() function: can hard get intuitive idea ’s going looking summary table, can useful visualise network . plot_network() function BISoN edge weight models, uncertainty shown edge weights. Uncertainty visualised showing lower upper bounds overlapping edges network.","code":"priors <- get_default_priors(\"binary\") priors #> $edge #> [1] \"normal(0, 2.5)\" #>  #> $fixed #> [1] \"normal(0, 2.5)\" #>  #> $random_mean #> [1] \"normal(0, 1)\" #>  #> $random_std #> [1] \"half-normal(1)\" prior_check(priors, \"binary\") priors$edge <- \"normal(-1, 2.5)\" prior_check(priors, \"binary\") fit_edge <- edge_model(   (event | duration) ~ dyad(node_1_id, node_2_id),    data=df,    data_type=\"binary\",   priors=priors ) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 finished in 1.1 seconds. #> Chain 2 finished in 1.1 seconds. #> Chain 3 finished in 1.0 seconds. #> Chain 4 finished in 1.0 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 1.1 seconds. #> Total execution time: 1.3 seconds. plot_trace(fit_edge, par_ids=2) plot_predictions(fit_edge, num_draws=20, type=\"density\") plot_predictions(fit_edge, num_draws=20, type=\"point\") summary(fit_edge) #> === Fitted BISoN edge model === #> Data type: binary #> Formula: (event | duration) ~ dyad(node_1_id, node_2_id) #> Number of nodes: 10 #> Number of dyads: 45 #> Directed: FALSE #> === Edge list summary === #>          median    5%   95% #> 1 <-> 2   0.881 0.491 0.992 #> 1 <-> 3   0.924 0.641 0.994 #> 1 <-> 4   0.737 0.151 0.985 #> 1 <-> 5   0.842 0.344 0.990 #> 1 <-> 6   0.881 0.486 0.991 #> 1 <-> 7   0.908 0.565 0.994 #> 1 <-> 8   0.039 0.002 0.263 #> 1 <-> 9   0.841 0.343 0.991 #> 1 <-> 10  0.605 0.192 0.920 #> 2 <-> 3   0.698 0.304 0.937 #> 2 <-> 4   0.040 0.002 0.265 #> 2 <-> 5   0.922 0.628 0.995 #> 2 <-> 6   0.054 0.002 0.398 #> 2 <-> 7   0.057 0.003 0.382 #> 2 <-> 8   0.105 0.004 0.687 #> 2 <-> 9   0.739 0.129 0.987 #> 2 <-> 10  0.923 0.648 0.994 #> 3 <-> 4   0.222 0.036 0.607 #> 3 <-> 5   0.736 0.134 0.987 #> 3 <-> 6   0.056 0.002 0.379 #> 3 <-> 7   0.184 0.029 0.528 #> 3 <-> 8   0.040 0.002 0.267 #> 3 <-> 9   0.106 0.004 0.677 #> 3 <-> 10  0.072 0.003 0.488 #> 4 <-> 5   0.737 0.132 0.985 #> 4 <-> 6   0.075 0.003 0.490 #> 4 <-> 7   0.459 0.138 0.814 #> 4 <-> 8   0.041 0.002 0.269 #> 4 <-> 9   0.841 0.363 0.990 #> 4 <-> 10  0.738 0.143 0.985 #> 5 <-> 6   0.046 0.002 0.312 #> 5 <-> 7   0.056 0.002 0.398 #> 5 <-> 8   0.047 0.002 0.327 #> 5 <-> 9   0.290 0.041 0.743 #> 5 <-> 10  0.111 0.003 0.710 #> 6 <-> 7   0.729 0.143 0.983 #> 6 <-> 8   0.758 0.410 0.953 #> 6 <-> 9   0.728 0.140 0.985 #> 6 <-> 10  0.892 0.503 0.992 #> 7 <-> 8   0.054 0.002 0.373 #> 7 <-> 9   0.922 0.643 0.994 #> 7 <-> 10  0.905 0.588 0.993 #> 8 <-> 9   0.883 0.502 0.992 #> 8 <-> 10  0.924 0.635 0.995 #> 9 <-> 10  0.234 0.037 0.613 plot_network(fit_edge, lwd=5)"},{"path":"bisonR/articles/getting_started.html","id":"non-random-edge-weights","dir":"Articles","previous_headings":"","what":"Non-random Edge Weights","title":"Getting Started","text":"Now fitted edge weight model ’re happy , can move downstream analyses. first ’ll consider non-random edge weight analysis, Bayesian version Bejder et al. 1998 test non-random association. analysis compare fitted edge weight model null version model edges weight. use model_comparison function estimate relative probabilities full edge weight model null model: shows relative probabilities models comparison. case results conclusive, network seems non-random. ’s likely case almost networks, might want conduct test anyway.","code":"fit_null <- edge_model(   (event | duration) ~ 1,    data=df,    data_type=\"binary\",   priors=priors ) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 finished in 0.5 seconds. #> Chain 2 finished in 0.5 seconds. #> Chain 3 finished in 0.5 seconds. #> Chain 4 finished in 0.5 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 0.5 seconds. #> Total execution time: 0.7 seconds.  model_comparison(list(non_random_model=fit_edge, random_model=fit_null)) #> Warning: Some Pareto k diagnostic values are too high. See help('pareto-k-diagnostic') for details. #> Method: stacking #> ------ #>                  weight #> non_random_model 1.000  #> random_model     0.000"},{"path":"bisonR/articles/getting_started.html","id":"dyadic-regression","dir":"Articles","previous_headings":"","what":"Dyadic Regression","title":"Getting Started","text":"Dyadic regression dyadic network properties (usually edge weight) regressed dyad-level properties. case ’ll regressing edge weight difference age, test hypothesis differences age drive social connections. Just like edge weight models, need set priors, can done much way last time: check priors use prior_check() function like last time, regression coefficients usually harder intuitively set priors . Instead visualising coefficient priors directly, ’ll simulate predictions model based priors. can use prior_predictive_check() :  plot shows marginal effect describing relationship predictor response. extreme, prior allows age difference 10 associated difference response around 20 - 30. probably bit extreme ideal, purposes tutorial ’ll leave priors now. dataframe dyadic regression different one used fit edge weight model. case need row dyad, need index using factor-typed node variables levels used fitting edge weight model. example necessary data original dataframe, can extract using dplyr. dyadic_regression() function uses similar formula syntax edge_model function. example use edge weight, described dyad(node_1_id, node_2_id), left hand side response variable. use age_diff variable dataframe single fixed effect, additional fixed random effects can also included. Note default dyadic regression function uses multi-membership effects, denoted argument mm, capture non-independence due nodes regression. vital feature analyses prevent spurious conclusions, sake simulated data don’t need include effect . Like last time want check model fit properly makes good predictions. can done exactly way last time:  ’ll use plot_predictions() check model fit:  Now can examine regression coefficients using summary(). can interpreted mostly way standard regression, though categories treated differently. See information categories handled bisonR regression functions. can also visualise estimated marginal effect using plot_predictions():  Now ’ve seen fit dyadic regression, can move another common type analysis: nodal regression.","code":"df_dyadic <- df %>%   distinct(node_1_id, node_2_id, age_diff)  priors <- get_default_priors(\"dyadic_regression\") priors #> $fixed #> [1] \"normal(0, 1)\" #>  #> $random_mean #> [1] \"normal(0, 1)\" #>  #> $random_std #> [1] \"half-normal(1)\" #>  #> $multimembership #> [1] \"half-normal(1)\" #>  #> $error #> [1] \"half-normal(1)\" prior_predictive_check(   dyad(node_1_id, node_2_id) ~ age_diff,    data=df_dyadic,   options=list(edgemodel=fit_edge, mm=FALSE),   priors=priors,   model_type=\"dyadic_regression\",   plot_type=\"marginal\" ) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 1 finished in 0.2 seconds. #> Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 2 finished in 0.2 seconds. #> Chain 3 finished in 0.2 seconds. #> Chain 4 finished in 0.2 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 0.2 seconds. #> Total execution time: 0.4 seconds. #> Warning: 3 of 4000 (0.0%) transitions ended with a divergence. #> See https://mc-stan.org/misc/warnings for details. fit_dyadic <- dyadic_regression(   dyad(node_1_id, node_2_id) ~ age_diff,    fit_edge,    df_dyadic,    mm=FALSE,    priors=priors ) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 1 finished in 4.1 seconds. #> Chain 3 finished in 4.1 seconds. #> Chain 4 finished in 4.1 seconds. #> Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 2 finished in 4.4 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 4.2 seconds. #> Total execution time: 4.5 seconds. plot_trace(fit_dyadic, par_ids=1) plot_predictions(fit_dyadic, num_draws=20, type=\"density\") summary(fit_dyadic) #> === Fitted dyadic regression model === #> Formula: dyad(node_1_id, node_2_id) ~ age_diff #> Number of dyads: 45 #> === Coefficient summary ===                 #> variable           50%     5%   95% #>   intercept      0.060 -0.332 0.445 #>   fixed_age_diff 0.423  0.328 0.516 plot_predictions(fit_dyadic, num_draws=20, type=\"marginal\")"},{"path":"bisonR/articles/getting_started.html","id":"nodal-regression","dir":"Articles","previous_headings":"","what":"Nodal Regression","title":"Getting Started","text":"Nodal regression node-level network properties, centrality, regressed node-level properties, age. spirit last time need prepare matrix row corresponds node. case can extract original matrix using dplyr: Priors can set exact way dyadic_regression() function: Run prior check much way well:   purposes demonstration won’t worry much checks look, give idea go setting priors. formula syntax nodal regression similar dyadic regression, analysis level node, dyad, longer need dyad(node_1_id, node_2_id) term. Instead want use node-level network metric characterise node positions within network, maintaining uncertainty edge weights. bisonR can handle automatically, simply need specify network metric use. case ’ll use classic measure centrality strength(), many others available. See documentation details. model fitted, need employ diagnostic checks last time ensure model reliable. may seem little tedious, won’t always go smoothly, ’s vital part model fitting essential reliable inferences, even frequentist statistics.  Just like previous example, can now summarise regression coefficients using summary() function: ’s also nice use predictions model help understand model:","code":"df_1 <- df %>%    select(node_id=node_1_id, age=age_1) df_2 <- df %>%   select(node_id=node_2_id, age=age_2) df_nodal <- bind_rows(df_1, df_2) %>%   distinct(node_id, age) %>%   mutate(age_std=scale(age)) df_nodal #>    node_id      age    age_std #> 1        1 21.28090  1.0615488 #> 2        2 15.89238 -0.6683276 #> 3        3 15.41881 -0.8203571 #> 4        4 16.37406 -0.5136937 #> 5        5 14.05589 -1.2578939 #> 6        6 22.21531  1.3615239 #> 7        7 18.70769  0.2354725 #> 8        8 22.87677  1.5738717 #> 9        9 15.97508 -0.6417791 #> 10      10 16.94512 -0.3303654 priors <- get_default_priors(\"nodal_regression\") priors$fixed <- \"normal(0, 1)\" priors #> $fixed #> [1] \"normal(0, 1)\" #>  #> $random_mean #> [1] \"normal(0, 1)\" #>  #> $random_std #> [1] \"half-normal(1)\" #>  #> $error #> [1] \"half-normal(1)\" prior_check(priors, model_type=\"nodal_regression\") prior_predictive_check(   strength(node_id) ~ age_std,   data=df_nodal,   model_type=\"nodal_regression\",   options=list(edgemodel=fit_edge),   plot_type=\"marginal\" ) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 1 finished in 0.1 seconds. #> Chain 2 finished in 0.1 seconds. #> Chain 3 finished in 0.1 seconds. #> Chain 4 finished in 0.1 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 0.1 seconds. #> Total execution time: 0.2 seconds. fit_nodal <- nodal_regression(   strength(node_id) ~ age_std,    fit_edge,    df_nodal,    priors=priors ) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  #> Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  #> Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  #> Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  #> Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  #> Chain 1 finished in 0.3 seconds. #> Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  #> Chain 2 finished in 0.3 seconds. #> Chain 3 finished in 0.3 seconds. #> Chain 4 finished in 0.3 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 0.3 seconds. #> Total execution time: 0.4 seconds. plot_trace(fit_nodal, par_ids=1) summary(fit_nodal) #> === Fitted dyadic regression model === #> Formula: strength(node_id) ~ age_std #> Number of dyads: 45 #> === Coefficient summary ===                #> variable          50%     5%   95% #>   intercept     0.011 -0.474 0.499 #>   fixed_age_std 0.021 -0.524 0.602 plot_predictions(fit_nodal, num_draws=20, type=\"marginal\")"},{"path":"bisonR/articles/getting_started.html","id":"network-metrics","dir":"Articles","previous_headings":"","what":"Network metrics","title":"Getting Started","text":"well types statistical analysis ’ve already covered, network metrics can also extracted use quantitative qualitative analyses. can done draw_network_metric_samples() function network-level metrics (also known global metrics) draw_node_metric_samples() node-level metrics. Let’s try social differentiation: can visualise posterior distribution social differentiation  posterior samples can now used descriptively, compare networks, downstream analyses.","code":"social_differentiation_samples <- draw_network_metric_samples(fit_edge, \"social_differentiation\") social_differentiation_samples #>       50%        5%       95%  #> 0.7589647 0.6815023 0.8385932 plot(social_differentiation_samples)"},{"path":"bisonR/articles/getting_started.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting Started","text":"brief introduction bisonR package, hope useful. R package many features shown , package constant development. welcome feedback criticism. hope find package useful, happy social network analysis!","code":""},{"path":"bisonR/articles/mixture_models.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Edge Mixture Models","text":"Edge mixture models can used detect different types social connections looking clustering edge weights. bisonR provides support edge mixture models edge_mixture function. two key outputs bisonR edge mixture model. First generates posterior probability distribution number components (clusters, interpreted associal connection types), 1 maximum \\(K\\), entire network. Secondly, edge calculates probability dyad belongs possible component. show works, first ’ll load bisonR simulate data: example simulate data binary edge model 2 underlying clusters (also called components), dyads belong either cluster equal probability: Since data already aggregated (e.g. single row dyad), can use binary conjugate model speed: won’t conduct usual checks sake tutorial, point ’d recommend conducting diagnostic checks ensure model fit. model fit well, can use edge_mixture() function fit edge mixture model: ’s quite bit going summary, let’s break . top section shows model fits best probability assigned model. second section shows probabilities models corresponding number components (\\(K = 1, 2, 3, ...\\)). ’ll notice model highest probability best fitting model section . final section shows edge-level probabilities component membership corresponding dyad. can interpreted probability dyad belongs given component/cluster/social connection type. information shown summary can also accessed using functions get_network_component_probabilities() get_edge_component_probabilities(). two functions make possible access mixture model output programmatically downstream analysis plotting. get network-level probabilities number components, can use get_network_component_probabilities() function: use probabilities component membership given number components, can use get_edge_component_probabilities() function, 3 number components assume exist network: short tutorial use edge_mixture() fit mixture models bisonR. questions please get touch.","code":"library(bisonR) #> Loading required package: cmdstanr #> This is cmdstanr version 0.5.3 #> - CmdStanR documentation and vignettes: mc-stan.org/cmdstanr #> - CmdStan path: /home/runner/.cmdstan/cmdstan-2.30.1 #> - CmdStan version: 2.30.1 library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union sim_data <- simulate_edge_model_mixture(\"binary\", num_components = 2, component_weights = c(0.5, 0.5)) df <- sim_data$df_sim head(df) #> # A tibble: 6 × 5 #> # Groups:   node_1_id [1] #>   node_1_id node_2_id event duration age_diff #>   <fct>     <fct>     <dbl>    <dbl>    <dbl> #> 1 1         2             2        3        1 #> 2 1         3            12       14        1 #> 3 1         4             0       12        1 #> 4 1         5             7        9        1 #> 5 1         6             8       11        1 #> 6 1         7             5       18        1 fit_edge <- edge_model(   (event | duration) ~ dyad(node_1_id, node_2_id),    data=df,    data_type=\"binary_conjugate\" ) #> No priors set by user, using default priors instead. We recommend setting and checking priors explicitly for reliable inference. fit_mixture <- edge_mixture(fit_edge, num_components=5, verbose=FALSE) # verbose=FALSE for tutorial purposes summary(fit_mixture) #> === Fitted dyadic mixture model === #> Maximum number of components:  #> Best model: 1 components #> Probability of best model: 72.6% #> === Component probabilities === #>            1     2     3     4     5 #> P(K=k) 0.726 0.237 0.024 0.013 0.001 #> === Edge component probabilities for best model (K = 1) === #>         1 #> 1 <-> 2 1 #> 1 <-> 3 1 #> 1 <-> 4 1 #> 1 <-> 5 1 #> 1 <-> 6 1 #> 1 <-> 7 1 #> ... get_network_component_probabilities(fit_mixture) #>   num_components  probability #> 1              1 0.7258918675 #> 2              2 0.2365150107 #> 3              3 0.0242506680 #> 4              4 0.0125842024 #> 5              5 0.0007582513 get_edge_component_probabilities(fit_mixture, 3) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] \"1\"  \"1\"  \"1\"  \"1\"  \"1\"  \"1\"  \"1\"  \"1\"  \"1\"  \"1\"   \"1\"   \"1\"   \"1\"   \"1\"   #> [2,] \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\"  \"12\"  \"13\"  \"14\"  \"15\"  #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,] \"2\"   \"2\"   \"2\"   \"2\"   \"2\"   \"2\"   \"2\"   \"2\"   \"2\"   \"2\"   \"2\"   \"2\"   #> [2,] \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  \"12\"  \"13\"  \"14\"  #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,] \"2\"   \"3\"   \"3\"   \"3\"   \"3\"   \"3\"   \"3\"   \"3\"   \"3\"   \"3\"   \"3\"   \"3\"   #> [2,] \"15\"  \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  \"12\"  \"13\"  \"14\"  #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,] \"3\"   \"4\"   \"4\"   \"4\"   \"4\"   \"4\"   \"4\"   \"4\"   \"4\"   \"4\"   \"4\"   \"4\"   #> [2,] \"15\"  \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  \"12\"  \"13\"  \"14\"  \"15\"  #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,] \"5\"   \"5\"   \"5\"   \"5\"   \"5\"   \"5\"   \"5\"   \"5\"   \"5\"   \"5\"   \"6\"   \"6\"   #> [2,] \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  \"12\"  \"13\"  \"14\"  \"15\"  \"7\"   \"8\"   #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,] \"6\"   \"6\"   \"6\"   \"6\"   \"6\"   \"6\"   \"6\"   \"7\"   \"7\"   \"7\"   \"7\"   \"7\"   #> [2,] \"9\"   \"10\"  \"11\"  \"12\"  \"13\"  \"14\"  \"15\"  \"8\"   \"9\"   \"10\"  \"11\"  \"12\"  #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,] \"7\"   \"7\"   \"7\"   \"8\"   \"8\"   \"8\"   \"8\"   \"8\"   \"8\"   \"8\"   \"9\"   \"9\"   #> [2,] \"13\"  \"14\"  \"15\"  \"9\"   \"10\"  \"11\"  \"12\"  \"13\"  \"14\"  \"15\"  \"10\"  \"11\"  #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,] \"9\"   \"9\"   \"9\"   \"9\"   \"10\"  \"10\"  \"10\"  \"10\"  \"10\"  \"11\"  \"11\"  \"11\"  #> [2,] \"12\"  \"13\"  \"14\"  \"15\"  \"11\"  \"12\"  \"13\"  \"14\"  \"15\"  \"12\"  \"13\"  \"14\"  #>      [,99] [,100] [,101] [,102] [,103] [,104] [,105] #> [1,] \"11\"  \"12\"   \"12\"   \"12\"   \"13\"   \"13\"   \"14\"   #> [2,] \"15\"  \"13\"   \"14\"   \"15\"   \"14\"   \"15\"   \"15\"   #>        X1    X2    X3 #> 1   0.160 0.515 0.325 #> 2   0.010 0.475 0.515 #> 3   0.845 0.125 0.030 #> 4   0.035 0.520 0.445 #> 5   0.075 0.560 0.365 #> 6   0.665 0.310 0.025 #> 7   0.075 0.450 0.475 #> 8   0.015 0.400 0.585 #> 9   0.760 0.230 0.010 #> 10  0.795 0.155 0.050 #> 11  0.770 0.220 0.010 #> 12  0.810 0.185 0.005 #> 13  0.070 0.525 0.405 #> 14  0.410 0.450 0.140 #> 15  0.055 0.430 0.515 #> 16  0.560 0.345 0.095 #> 17  0.540 0.355 0.105 #> 18  0.005 0.445 0.550 #> 19  0.000 0.385 0.615 #> 20  0.810 0.180 0.010 #> 21  0.705 0.275 0.020 #> 22  0.780 0.205 0.015 #> 23  0.770 0.230 0.000 #> 24  0.695 0.280 0.025 #> 25  0.005 0.200 0.795 #> 26  0.050 0.420 0.530 #> 27  0.510 0.415 0.075 #> 28  0.745 0.235 0.020 #> 29  0.805 0.175 0.020 #> 30  0.160 0.425 0.415 #> 31  0.830 0.155 0.015 #> 32  0.005 0.250 0.745 #> 33  0.820 0.150 0.030 #> 34  0.790 0.205 0.005 #> 35  0.135 0.490 0.375 #> 36  0.005 0.325 0.670 #> 37  0.000 0.475 0.525 #> 38  0.015 0.305 0.680 #> 39  0.780 0.215 0.005 #> 40  0.000 0.350 0.650 #> 41  0.810 0.175 0.015 #> 42  0.010 0.385 0.605 #> 43  0.500 0.355 0.145 #> 44  0.745 0.235 0.020 #> 45  0.745 0.235 0.020 #> 46  0.830 0.155 0.015 #> 47  0.000 0.310 0.690 #> 48  0.580 0.330 0.090 #> 49  0.000 0.460 0.540 #> 50  0.645 0.285 0.070 #> 51  0.005 0.290 0.705 #> 52  0.745 0.235 0.020 #> 53  0.710 0.250 0.040 #> 54  0.125 0.550 0.325 #> 55  0.015 0.455 0.530 #> 56  0.795 0.200 0.005 #> 57  0.560 0.355 0.085 #> 58  0.005 0.415 0.580 #> 59  0.000 0.365 0.635 #> 60  0.000 0.375 0.625 #> 61  0.375 0.395 0.230 #> 62  0.010 0.415 0.575 #> 63  0.725 0.255 0.020 #> 64  0.035 0.420 0.545 #> 65  0.825 0.160 0.015 #> 66  0.025 0.510 0.465 #> 67  0.005 0.310 0.685 #> 68  0.000 0.265 0.735 #> 69  0.030 0.470 0.500 #> 70  0.835 0.140 0.025 #> 71  0.015 0.485 0.500 #> 72  0.000 0.300 0.700 #> 73  0.000 0.230 0.770 #> 74  0.710 0.265 0.025 #> 75  0.615 0.335 0.050 #> 76  0.700 0.255 0.045 #> 77  0.000 0.390 0.610 #> 78  0.000 0.235 0.765 #> 79  0.795 0.190 0.015 #> 80  0.775 0.210 0.015 #> 81  0.760 0.190 0.050 #> 82  0.810 0.180 0.010 #> 83  0.155 0.475 0.370 #> 84  0.005 0.365 0.630 #> 85  0.000 0.375 0.625 #> 86  0.600 0.295 0.105 #> 87  0.150 0.425 0.425 #> 88  0.680 0.295 0.025 #> 89  0.675 0.310 0.015 #> 90  0.030 0.390 0.580 #> 91  0.785 0.180 0.035 #> 92  0.020 0.410 0.570 #> 93  0.820 0.175 0.005 #> 94  0.010 0.385 0.605 #> 95  0.740 0.250 0.010 #> 96  0.055 0.505 0.440 #> 97  0.145 0.500 0.355 #> 98  0.230 0.520 0.250 #> 99  0.000 0.450 0.550 #> 100 0.000 0.230 0.770 #> 101 0.000 0.335 0.665 #> 102 0.805 0.185 0.010 #> 103 0.700 0.230 0.070 #> 104 0.200 0.520 0.280 #> 105 0.825 0.165 0.010 #>     node_1 node_2 P(K = 1) P(K = 2) P(K = 3) #> 1        1      2    0.160    0.515    0.325 #> 2        1      3    0.010    0.475    0.515 #> 3        1      4    0.845    0.125    0.030 #> 4        1      5    0.035    0.520    0.445 #> 5        1      6    0.075    0.560    0.365 #> 6        1      7    0.665    0.310    0.025 #> 7        1      8    0.075    0.450    0.475 #> 8        1      9    0.015    0.400    0.585 #> 9        1     10    0.760    0.230    0.010 #> 10       1     11    0.795    0.155    0.050 #> 11       1     12    0.770    0.220    0.010 #> 12       1     13    0.810    0.185    0.005 #> 13       1     14    0.070    0.525    0.405 #> 14       1     15    0.410    0.450    0.140 #> 15       2      3    0.055    0.430    0.515 #> 16       2      4    0.560    0.345    0.095 #> 17       2      5    0.540    0.355    0.105 #> 18       2      6    0.005    0.445    0.550 #> 19       2      7    0.000    0.385    0.615 #> 20       2      8    0.810    0.180    0.010 #> 21       2      9    0.705    0.275    0.020 #> 22       2     10    0.780    0.205    0.015 #> 23       2     11    0.770    0.230    0.000 #> 24       2     12    0.695    0.280    0.025 #> 25       2     13    0.005    0.200    0.795 #> 26       2     14    0.050    0.420    0.530 #> 27       2     15    0.510    0.415    0.075 #> 28       3      4    0.745    0.235    0.020 #> 29       3      5    0.805    0.175    0.020 #> 30       3      6    0.160    0.425    0.415 #> 31       3      7    0.830    0.155    0.015 #> 32       3      8    0.005    0.250    0.745 #> 33       3      9    0.820    0.150    0.030 #> 34       3     10    0.790    0.205    0.005 #> 35       3     11    0.135    0.490    0.375 #> 36       3     12    0.005    0.325    0.670 #> 37       3     13    0.000    0.475    0.525 #> 38       3     14    0.015    0.305    0.680 #> 39       3     15    0.780    0.215    0.005 #> 40       4      5    0.000    0.350    0.650 #> 41       4      6    0.810    0.175    0.015 #> 42       4      7    0.010    0.385    0.605 #> 43       4      8    0.500    0.355    0.145 #> 44       4      9    0.745    0.235    0.020 #> 45       4     10    0.745    0.235    0.020 #> 46       4     11    0.830    0.155    0.015 #> 47       4     12    0.000    0.310    0.690 #> 48       4     13    0.580    0.330    0.090 #> 49       4     14    0.000    0.460    0.540 #> 50       4     15    0.645    0.285    0.070 #> 51       5      6    0.005    0.290    0.705 #> 52       5      7    0.745    0.235    0.020 #> 53       5      8    0.710    0.250    0.040 #> 54       5      9    0.125    0.550    0.325 #> 55       5     10    0.015    0.455    0.530 #> 56       5     11    0.795    0.200    0.005 #> 57       5     12    0.560    0.355    0.085 #> 58       5     13    0.005    0.415    0.580 #> 59       5     14    0.000    0.365    0.635 #> 60       5     15    0.000    0.375    0.625 #> 61       6      7    0.375    0.395    0.230 #> 62       6      8    0.010    0.415    0.575 #> 63       6      9    0.725    0.255    0.020 #> 64       6     10    0.035    0.420    0.545 #> 65       6     11    0.825    0.160    0.015 #> 66       6     12    0.025    0.510    0.465 #> 67       6     13    0.005    0.310    0.685 #> 68       6     14    0.000    0.265    0.735 #> 69       6     15    0.030    0.470    0.500 #> 70       7      8    0.835    0.140    0.025 #> 71       7      9    0.015    0.485    0.500 #> 72       7     10    0.000    0.300    0.700 #> 73       7     11    0.000    0.230    0.770 #> 74       7     12    0.710    0.265    0.025 #> 75       7     13    0.615    0.335    0.050 #> 76       7     14    0.700    0.255    0.045 #> 77       7     15    0.000    0.390    0.610 #> 78       8      9    0.000    0.235    0.765 #> 79       8     10    0.795    0.190    0.015 #> 80       8     11    0.775    0.210    0.015 #> 81       8     12    0.760    0.190    0.050 #> 82       8     13    0.810    0.180    0.010 #> 83       8     14    0.155    0.475    0.370 #> 84       8     15    0.005    0.365    0.630 #> 85       9     10    0.000    0.375    0.625 #> 86       9     11    0.600    0.295    0.105 #> 87       9     12    0.150    0.425    0.425 #> 88       9     13    0.680    0.295    0.025 #> 89       9     14    0.675    0.310    0.015 #> 90       9     15    0.030    0.390    0.580 #> 91      10     11    0.785    0.180    0.035 #> 92      10     12    0.020    0.410    0.570 #> 93      10     13    0.820    0.175    0.005 #> 94      10     14    0.010    0.385    0.605 #> 95      10     15    0.740    0.250    0.010 #> 96      11     12    0.055    0.505    0.440 #> 97      11     13    0.145    0.500    0.355 #> 98      11     14    0.230    0.520    0.250 #> 99      11     15    0.000    0.450    0.550 #> 100     12     13    0.000    0.230    0.770 #> 101     12     14    0.000    0.335    0.665 #> 102     12     15    0.805    0.185    0.010 #> 103     13     14    0.700    0.230    0.070 #> 104     13     15    0.200    0.520    0.280 #> 105     14     15    0.825    0.165    0.010"},{"path":"bisonR/articles/windows_installation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Installing cmdstanR on Windows","text":"installation cmdstanR can troublesome Windows computers, even networked computers. Don’t let put though, get cmdstanR installed ’ll able run bisonR many packages speed less buggy-ness. article ’ve compiled list problems fixes worked us. cases ’ve resorted editing registry fix problems, careful make sure make changes ’re confident, registry holds lot important information used OS. Don’t change anything don’t complete backup don’t fully understand changed.","code":""},{"path":[]},{"path":"bisonR/articles/windows_installation.html","id":"installing-into-a-network-directoryissues-with-tar-exe","dir":"Articles","previous_headings":"Fixes","what":"Installing into a network directory/issues with tar.exe","title":"Installing cmdstanR on Windows","text":"’re using computer network (.e. universities businesses), ’s good chance HOME environment variable network location. cause many problems installation even work, likely much slower . easiest solution problem create local directory (.e. somewhere C drive isn’t indexed network backups etc) called “cmdstan”. install location cmdstan, can specify directory using install_cmdstan():","code":"install_cmdstan(dir=\"C:/path/to/directory/cmdstan\")"},{"path":"bisonR/articles/windows_installation.html","id":"rtools-4-x-was-not-found-but-is-required-to-run-cmdstan-with-r-version-4-x-","dir":"Articles","previous_headings":"Fixes","what":"RTools 4.x was not found but is required to run CmdStan with R version 4.x.","title":"Installing cmdstanR on Windows","text":"problem occurs environment variable set properly Rtools installed. appears common problem, can fixed adding environment variable RTOOLS40_HOME (Rtools 4.0) RTOOLS42_HOME (Rtools 4.2). environment variable point location Rtools installation.","code":""},{"path":"bisonR/articles/windows_installation.html","id":"supplied-csv-file-is-corrupt","dir":"Articles","previous_headings":"Fixes","what":"Supplied csv file is corrupt","title":"Installing cmdstanR on Windows","text":"occurs running sampler. don’t know source problem, installing github version cmdstanR seems fix problem. can done running following code: doesn’t work, make sure ’re using latest version R (R 4.2.1) time writing.","code":"remotes::install_github(\"stan-dev/cmdstanr\")"},{"path":"bisonR/articles/windows_installation.html","id":"error-cmdstan-path-has-not-been-set-yet-","dir":"Articles","previous_headings":"Fixes","what":"Error: CmdStan path has not been set yet.","title":"Installing cmdstanR on Windows","text":"can happen R session following session first installed cmdstanR. reason environment variable CMDSTAN, set installation, overwritten. think may due configuration managed computers. solution problem set CMDSTAN path cmdstan installation. Specifically, needs point installation version directory (e.g. .cmdstan/cmdstan-2.30.0), rather just .cmdstan/ cmdstan/ directory.","code":""},{"path":"bisonR/articles/windows_installation.html","id":"get-in-touch","dir":"Articles","previous_headings":"","what":"Get in touch","title":"Installing cmdstanR on Windows","text":"Let us know fixes work don’t work , elegant ways fix issues. ’ve spent several hours trying fix issues hope lessons ’ve learned useful!","code":""},{"path":"bisonR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jordan Hart. Author, maintainer.","code":""},{"path":"bisonR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hart J (2022). bisonR: Bayesian Inference Social Networks R. https://github.com/JHart96/bisonR, https://jhart96.github.io/bisonR/.","code":"@Manual{,   title = {bisonR: Bayesian Inference of Social Networks in R},   author = {Jordan Hart},   year = {2022},   note = {https://github.com/JHart96/bisonR, https://jhart96.github.io/bisonR/}, }"},{"path":"bisonR/index.html","id":"bisonr---an-r-package-for-bayesian-inference-of-social-networks","dir":"","previous_headings":"","what":"BISoN R Package","title":"BISoN R Package","text":"package still continuous development yet fully tested. Please let us know encounter unexpected behaviour. bisonR R package implementing BISoN framework conducting Bayesian analysis social networks. BISoN estimates uncertainty edge weights social networks empirical data (observations) builds networks uncertainty. networks can visualised uncertainty, can also analysed fully Bayesian methodology using standard tools regression.","code":""},{"path":"bisonR/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"BISoN R Package","text":"get started package use code : fit basic edge model model simulated data generate output like : detailed example check Getting Started page : https://jhart96.github.io/bisonR/articles/getting_started.html.","code":"library(bisonR)  sim_data <- simulate_edge_model(\"binary\", aggregated = TRUE) df <- sim_data$df_sim  priors <- get_default_priors(\"binary\")  fit_edge <- edge_model(   (event | duration) ~ dyad(node_1_id, node_2_id),    data=df,    data_type=\"binary\",   priors=priors )  summary(fit_edge) === Fitted BISoN edge model === Data type: binary Formula: (event | duration) ~ dyad(node_1_id, node_2_id) Number of nodes: 10 Number of dyads: 45 Directed: FALSE === Edge list summary ===          median    5%   95% 1 <-> 2   0.156 0.014 0.530 1 <-> 3   0.702 0.219 0.973 2 <-> 3   0.793 0.356 0.982 ..."},{"path":[]},{"path":"bisonR/index.html","id":"installing-cmdstanr","dir":"","previous_headings":"Installation","what":"Installing CmdStanR","title":"BISoN R Package","text":"bisonR package written R, uses Stan programming language fit Bayesian models. Stan separate program, interfaces bisonR using R package called cmdstanR. Stan cmdstanR installed different way standard R packages, require specific series installation steps. Windows, proceeding may need install version Rtools appropriate version R. Rtools can found : https://cran.r-project.org/bin/windows/Rtools/. full instructions install cmdstanR can found https://mc-stan.org/cmdstanr/. ’ve found following steps often work, depending operating system version R, process may involved.","code":"install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\"))) library(cmdstanr) check_cmdstan_toolchain(fix = TRUE, quiet = TRUE) install_cmdstan() # On networked PCs, specify a local directory here with the argument dir=path_to_local_directory"},{"path":"bisonR/index.html","id":"installing-bisonr","dir":"","previous_headings":"Installation","what":"Installing bisonR","title":"BISoN R Package","text":"bisonR isn’t currently CRAN, can installed GitHub. , make sure remotes package installed. run following command:","code":"remotes::install_github(\"JHart96/bisonR\")"},{"path":"bisonR/index.html","id":"development-version","dir":"","previous_headings":"Installation > Installing bisonR","what":"Development version","title":"BISoN R Package","text":"want install latest development version, bugs , can install development branch. option recommended standard users.","code":"remotes::install_github(\"JHart96/bisonR@dev\")"},{"path":"bisonR/reference/bisonR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'bisonR' package. — bisonR-package","title":"The 'bisonR' package. — bisonR-package","text":"R package Bayesian Inference Social Networks","code":""},{"path":"bisonR/reference/convert_gbi_to_bison.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert group-by-individual matrix to bisonR format — convert_gbi_to_bison","title":"Convert group-by-individual matrix to bisonR format — convert_gbi_to_bison","text":"Convert group--individual matrix bisonR format","code":""},{"path":"bisonR/reference/convert_gbi_to_bison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert group-by-individual matrix to bisonR format — convert_gbi_to_bison","text":"","code":"convert_gbi_to_bison(   gbi,   group_properties = NULL,   individual_properties = NULL,   individual_constraints = NULL )"},{"path":"bisonR/reference/convert_gbi_to_bison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert group-by-individual matrix to bisonR format — convert_gbi_to_bison","text":"gbi Group--individual (R x C) matrix corresponding R groups C individuals. group_properties vector length R describing properties groups added dataframe. individual_properties vector length C describing properties individuals added dataframe. individual_constraints vector length C describing constraints individuals.","code":""},{"path":"bisonR/reference/convert_gbi_to_bison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert group-by-individual matrix to bisonR format — convert_gbi_to_bison","text":"dataframe use bisonR, row corresponds possible social event two individuals.","code":""},{"path":"bisonR/reference/draw_edgelist_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw samples from edgelist posterior — draw_edgelist_samples","title":"Draw samples from edgelist posterior — draw_edgelist_samples","text":"Draw samples edgelist posterior","code":""},{"path":"bisonR/reference/draw_edgelist_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw samples from edgelist posterior — draw_edgelist_samples","text":"","code":"draw_edgelist_samples(obj, num_draws)"},{"path":"bisonR/reference/draw_edgelist_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw samples from edgelist posterior — draw_edgelist_samples","text":"obj S3 edge model object summarised. num_draws Number sample distributions draw posterior.","code":""},{"path":"bisonR/reference/draw_edgelist_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw samples from edgelist posterior — draw_edgelist_samples","text":"data.frame sample draws posteriors, column corresponds posterior draw.","code":""},{"path":"bisonR/reference/draw_network_metric_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw samples from posterior network-level metrics for a fitted edge weight model — draw_network_metric_samples","title":"Draw samples from posterior network-level metrics for a fitted edge weight model — draw_network_metric_samples","text":"Draw samples posterior network-level metrics fitted edge weight model","code":""},{"path":"bisonR/reference/draw_network_metric_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw samples from posterior network-level metrics for a fitted edge weight model — draw_network_metric_samples","text":"","code":"draw_network_metric_samples(   obj,   metric_name,   num_draws = 1000,   standardise = FALSE )"},{"path":"bisonR/reference/draw_network_metric_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw samples from posterior network-level metrics for a fitted edge weight model — draw_network_metric_samples","text":"obj Fitted S3 edge weight model. metric_name Character name network-level metric function. num_draws Number posterior draws use. standardise TRUE/FALSE indicating whether mean-center metrics within sample.","code":""},{"path":"bisonR/reference/draw_network_metric_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw samples from posterior network-level metrics for a fitted edge weight model — draw_network_metric_samples","text":"matrix metric samples column corresponds node, row corresponds posterior draw.","code":""},{"path":"bisonR/reference/draw_node_metric_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","title":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","text":"Draw samples posterior node metric fitted edge weight model","code":""},{"path":"bisonR/reference/draw_node_metric_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","text":"","code":"draw_node_metric_samples(   obj,   metric_name,   num_draws = 1000,   standardise = FALSE )"},{"path":"bisonR/reference/draw_node_metric_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","text":"obj Fitted S3 edge weight model. metric_name Character name node-level metric function. num_draws Number posterior draws use. standardise TRUE/FALSE indicating whether mean-center metrics within sample.","code":""},{"path":"bisonR/reference/draw_node_metric_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw samples from the posterior node metric for a fitted edge weight model — draw_node_metric_samples","text":"matrix metric samples column corresponds node, row corresponds posterior draw.","code":""},{"path":"bisonR/reference/dyadic_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit dyadic regression model — dyadic_regression","title":"Fit dyadic regression model — dyadic_regression","text":"Fit dyadic regression model","code":""},{"path":"bisonR/reference/dyadic_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit dyadic regression model — dyadic_regression","text":"","code":"dyadic_regression(   formula,   edgemodel,   df,   mc_cores = 4,   refresh = 500,   mm = TRUE,   priors = NULL,   priors_only = FALSE )"},{"path":"bisonR/reference/dyadic_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit dyadic regression model — dyadic_regression","text":"formula Formula model edgemodel Fitted edge weight model df Dataframe regression mc_cores Number cores use MCMC sampler refresh Frequency print-outs MCMC sampler mm TRUE/FALSE indicating whether include multi-membership effects regression priors List priors format supplied get_default_priors(). priors_only Whether use priors posteriors allow posteriors updated data.","code":""},{"path":"bisonR/reference/dyadic_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit dyadic regression model — dyadic_regression","text":"S3 dyadic model object containing chain samples processed data.","code":""},{"path":"bisonR/reference/dyadic_regression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit dyadic regression model — dyadic_regression","text":"Fits dyadic regression mixed model form edge weight (uncertainty) either response predictor.","code":""},{"path":"bisonR/reference/edge_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a dyadic mixture model — edge_mixture","title":"Fit a dyadic mixture model — edge_mixture","text":"Fit dyadic mixture model","code":""},{"path":"bisonR/reference/edge_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a dyadic mixture model — edge_mixture","text":"","code":"edge_mixture(edgemodel, num_components = 5, verbose = TRUE)"},{"path":"bisonR/reference/edge_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a dyadic mixture model — edge_mixture","text":"edgemodel fitted edge weight model. num_components Maximum number components fit. verbose TRUE/FALSE indicating whether output messages progress fitting.","code":""},{"path":"bisonR/reference/edge_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a dyadic mixture model — edge_mixture","text":"edge_mixture object","code":""},{"path":"bisonR/reference/edge_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an edge model to data — edge_model","title":"Fit an edge model to data — edge_model","text":"Fit edge model data","code":""},{"path":"bisonR/reference/edge_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an edge model to data — edge_model","text":"","code":"edge_model(   formula,   data,   data_type = c(\"binary\", \"count\"),   directed = FALSE,   priors = NULL,   refresh = 0,   mc_cores = 4,   iter_sampling = 1000,   iter_warmup = 1000,   priors_only = FALSE )"},{"path":"bisonR/reference/edge_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an edge model to data — edge_model","text":"formula Formula specifying social events sampling effort LHS edge weights, fixed, random effects RHS. data Aggregated disaggregated dataframe dyadic observations. data_type \"binary\", \"count\", \"duration\", specifying type edge weight model use. directed TRUE FALSE specifying whether network directed . priors List priors format supplied get_default_priors(). refresh Frequency messages printed running sampler. mc_cores Number cores use running sampler. iter_sampling Number iterations use posterior samples. iter_warmup Number iterations use warmup (used samples). priors_only Whether use priors posteriors allow posteriors updated data.","code":""},{"path":"bisonR/reference/edge_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an edge model to data — edge_model","text":"S3 edge model object containing edge samples processed data.","code":""},{"path":"bisonR/reference/edge_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit an edge model to data — edge_model","text":"Fits BISoN edge weight model user-provided dataframe. function supports either aggregated (dyad-level) disaggregated (observation-level) dataframes. Node names IDs need formatted factors levels. type edge model interpretation edge weights used depends data_type, change interpretation edge weights.","code":""},{"path":"bisonR/reference/get_contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate contrasts between parameters — get_contrasts","title":"Calculate contrasts between parameters — get_contrasts","text":"Calculate contrasts parameters","code":""},{"path":"bisonR/reference/get_contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate contrasts between parameters — get_contrasts","text":"","code":"get_contrasts(obj, parameter_1, parameter_2, ci = 0.9)"},{"path":"bisonR/reference/get_contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate contrasts between parameters — get_contrasts","text":"obj Fitted S3 dyadic nodal model. parameter_1 Name parameter 1, shown model summary. parameter_2 Name parameter 2, shown model summary. ci Credible interval width, calculated quantiles.","code":""},{"path":"bisonR/reference/get_contrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate contrasts between parameters — get_contrasts","text":"vector median, lower bound, upper bound posterior contrast parameters 1 2.","code":""},{"path":"bisonR/reference/get_default_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Return default priors for a given model — get_default_priors","title":"Return default priors for a given model — get_default_priors","text":"Return default priors given model","code":""},{"path":"bisonR/reference/get_default_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return default priors for a given model — get_default_priors","text":"","code":"get_default_priors(model_type)"},{"path":"bisonR/reference/get_default_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return default priors for a given model — get_default_priors","text":"model_type character specifying type model retrieve priors (\"binary\", \"count\", \"duration\", etc)","code":""},{"path":"bisonR/reference/get_default_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return default priors for a given model — get_default_priors","text":"list default priors can used edge_model() function.","code":""},{"path":"bisonR/reference/get_edge_component_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Get probabilities of component membership for each edge — get_edge_component_probabilities","title":"Get probabilities of component membership for each edge — get_edge_component_probabilities","text":"Get probabilities component membership edge","code":""},{"path":"bisonR/reference/get_edge_component_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get probabilities of component membership for each edge — get_edge_component_probabilities","text":"","code":"get_edge_component_probabilities(object, num_components)"},{"path":"bisonR/reference/get_edge_component_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get probabilities of component membership for each edge — get_edge_component_probabilities","text":"object S3 edge mixture model object num_components number components mixture model","code":""},{"path":"bisonR/reference/get_edge_component_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get probabilities of component membership for each edge — get_edge_component_probabilities","text":"Dataframe summarising edge component probabilities edge","code":""},{"path":"bisonR/reference/get_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","title":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","text":"Retrieves edgelist uncertainty fitted edge weight model object","code":""},{"path":"bisonR/reference/get_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","text":"","code":"get_edgelist(obj, ci = 0.9, transform = TRUE)"},{"path":"bisonR/reference/get_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","text":"obj S3 edge model object. ci Credible interval use summary, based quantiles. transform TRUE FALSE specifying whether transform edge weights internal link function scale.","code":""},{"path":"bisonR/reference/get_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves an edgelist with uncertainty for a fitted edge weight model object — get_edgelist","text":"data.frame object columns node IDs, median, lower, upper bounds.","code":""},{"path":"bisonR/reference/get_network_component_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Get probabilities of component membership for the entire network — get_network_component_probabilities","title":"Get probabilities of component membership for the entire network — get_network_component_probabilities","text":"Get probabilities component membership entire network","code":""},{"path":"bisonR/reference/get_network_component_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get probabilities of component membership for the entire network — get_network_component_probabilities","text":"","code":"get_network_component_probabilities(object)"},{"path":"bisonR/reference/get_network_component_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get probabilities of component membership for the entire network — get_network_component_probabilities","text":"object S3 edge mixture model object","code":""},{"path":"bisonR/reference/get_network_component_probabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get probabilities of component membership for the entire network — get_network_component_probabilities","text":"dataframe probabilities numbers components entire network","code":""},{"path":"bisonR/reference/model_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Run leave-one-out model comparison — model_comparison","title":"Run leave-one-out model comparison — model_comparison","text":"Run leave-one-model comparison","code":""},{"path":"bisonR/reference/model_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run leave-one-out model comparison — model_comparison","text":"","code":"model_comparison(models)"},{"path":"bisonR/reference/model_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run leave-one-out model comparison — model_comparison","text":"models List fitted models compare","code":""},{"path":"bisonR/reference/model_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run leave-one-out model comparison — model_comparison","text":"output loo_compare function fitted models.","code":""},{"path":"bisonR/reference/nodal_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nodel regression model — nodal_regression","title":"Fit a nodel regression model — nodal_regression","text":"Fit nodel regression model","code":""},{"path":"bisonR/reference/nodal_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nodel regression model — nodal_regression","text":"","code":"nodal_regression(   formula,   edgemodel,   df,   mc_cores = 4,   refresh = 500,   priors = NULL,   priors_only = FALSE )"},{"path":"bisonR/reference/nodal_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nodel regression model — nodal_regression","text":"formula Formula model edgemodel Fitted edge weight model df Dataframe regression mc_cores Number cores use MCMC sampler refresh Frequency print-outs MCMC sampler priors List priors format supplied get_default_priors(). priors_only Whether use priors posteriors allow posteriors updated data.","code":""},{"path":"bisonR/reference/nodal_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nodel regression model — nodal_regression","text":"S3 nodal model object containing chain samples processed data.","code":""},{"path":"bisonR/reference/plot.network_metric_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot network metric samples — plot.network_metric_samples","title":"Plot network metric samples — plot.network_metric_samples","text":"Plot network metric samples","code":""},{"path":"bisonR/reference/plot.network_metric_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot network metric samples — plot.network_metric_samples","text":"","code":"# S3 method for network_metric_samples plot(x, ...)"},{"path":"bisonR/reference/plot.network_metric_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot network metric samples — plot.network_metric_samples","text":"x Network metric samples object ... Additional parameters passed plot function","code":""},{"path":"bisonR/reference/plot_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Sociogram plot with uncertainty of a fitted edge weight model object — plot_network","title":"Sociogram plot with uncertainty of a fitted edge weight model object — plot_network","text":"Sociogram plot uncertainty fitted edge weight model object","code":""},{"path":"bisonR/reference/plot_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sociogram plot with uncertainty of a fitted edge weight model object — plot_network","text":"","code":"plot_network(obj, ci = 0.9, lwd = 2)"},{"path":"bisonR/reference/plot_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sociogram plot with uncertainty of a fitted edge weight model object — plot_network","text":"obj S3 edge model object summarised. ci Credible interval use plot, based quantiles. lwd Line width scaling edge weights","code":""},{"path":"bisonR/reference/plot_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior predictive checks — plot_predictions","title":"Posterior predictive checks — plot_predictions","text":"Posterior predictive checks","code":""},{"path":"bisonR/reference/plot_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior predictive checks — plot_predictions","text":"","code":"plot_predictions(obj, ...)"},{"path":"bisonR/reference/plot_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior predictive checks — plot_predictions","text":"obj fitted S3 object edge weight, dyadic regression, nodal regression models. ... Additional arguments passed predictive plots.","code":""},{"path":"bisonR/reference/plot_predictions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior predictive checks — plot_predictions","text":"Plots densities summary statistics observed data predictions made model. plots can used check predictive performance model.","code":""},{"path":"bisonR/reference/plot_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Traceplot of MCMC chains — plot_trace","title":"Traceplot of MCMC chains — plot_trace","text":"Traceplot MCMC chains","code":""},{"path":"bisonR/reference/plot_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traceplot of MCMC chains — plot_trace","text":"","code":"plot_trace(obj, par_ids = 1:5, ...)"},{"path":"bisonR/reference/plot_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Traceplot of MCMC chains — plot_trace","text":"obj fitted S3 object edge weight, dyadic regression, nodal regression models. par_ids vector parameter IDs plotted. ... Additional arguments passed base R plots.","code":""},{"path":"bisonR/reference/plot_trace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Traceplot of MCMC chains — plot_trace","text":"Plots MCMC chains fitted model. model many parameters plot, first 12 plotted. change parameters plotted, pass par_ids argument","code":""},{"path":"bisonR/reference/print.network_metric_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a network metric samples object — print.network_metric_samples","title":"Print a network metric samples object — print.network_metric_samples","text":"Print network metric samples object","code":""},{"path":"bisonR/reference/print.network_metric_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a network metric samples object — print.network_metric_samples","text":"","code":"# S3 method for network_metric_samples print(x, ci = 0.9, ...)"},{"path":"bisonR/reference/print.network_metric_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a network metric samples object — print.network_metric_samples","text":"x S3 network metric samples object ci Credible interval use summary ... Additional parameters passed print","code":""},{"path":"bisonR/reference/print.summary.dyadic_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about a dyadic regression model — print.summary.dyadic_model","title":"Print information about a dyadic regression model — print.summary.dyadic_model","text":"Print information dyadic regression model","code":""},{"path":"bisonR/reference/print.summary.dyadic_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about a dyadic regression model — print.summary.dyadic_model","text":"","code":"# S3 method for summary.dyadic_model print(x, digits = 3, ...)"},{"path":"bisonR/reference/print.summary.dyadic_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information about a dyadic regression model — print.summary.dyadic_model","text":"x S3 dyadic regression model digits Number digits rounding coefficients. ... Additional arguments passed summary calculations.","code":""},{"path":"bisonR/reference/print.summary.edge_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about an edge mixture model — print.summary.edge_mixture","title":"Print information about an edge mixture model — print.summary.edge_mixture","text":"Print information edge mixture model","code":""},{"path":"bisonR/reference/print.summary.edge_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about an edge mixture model — print.summary.edge_mixture","text":"","code":"# S3 method for summary.edge_mixture print(x, digits = 3, ...)"},{"path":"bisonR/reference/print.summary.edge_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information about an edge mixture model — print.summary.edge_mixture","text":"x S3 edge mixture model summary. digits Number digits round summary values . ... Additional arguments passed print functions.","code":""},{"path":"bisonR/reference/print.summary.edge_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints out an edge model summary object. — print.summary.edge_model","title":"Prints out an edge model summary object. — print.summary.edge_model","text":"Prints edge model summary object.","code":""},{"path":"bisonR/reference/print.summary.edge_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints out an edge model summary object. — print.summary.edge_model","text":"","code":"# S3 method for summary.edge_model print(x, ...)"},{"path":"bisonR/reference/print.summary.edge_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints out an edge model summary object. — print.summary.edge_model","text":"x S3 edge model object. ... Additional parameters passed print function.","code":""},{"path":"bisonR/reference/print.summary.nodal_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about a fitted nodal regression model — print.summary.nodal_model","title":"Print information about a fitted nodal regression model — print.summary.nodal_model","text":"Print information fitted nodal regression model","code":""},{"path":"bisonR/reference/print.summary.nodal_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about a fitted nodal regression model — print.summary.nodal_model","text":"","code":"# S3 method for summary.nodal_model print(x, digits = 3, ...)"},{"path":"bisonR/reference/print.summary.nodal_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information about a fitted nodal regression model — print.summary.nodal_model","text":"x S3 nodal regression model digits Number digits rounding coefficients. ... Additional arguments passed summary calculations.","code":""},{"path":"bisonR/reference/prior_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior checks — prior_check","title":"Prior checks — prior_check","text":"Prior checks","code":""},{"path":"bisonR/reference/prior_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior checks — prior_check","text":"","code":"prior_check(priors, model_type, type = \"density\")"},{"path":"bisonR/reference/prior_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior checks — prior_check","text":"priors List priors model, can retrieved using get_default_prior(). model_type Type model priors used (argument get_default_prior()). type Type prior check run, \"value\" \"prediction\". Details .","code":""},{"path":"bisonR/reference/prior_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prior checks — prior_check","text":"parameter type determines type prior check run. type=\"value\" plot prior probability parameter value original scale. type=\"predictive\" run prior predictive plot, predictions model generated using prior probabilities (model updated data).","code":""},{"path":"bisonR/reference/prior_predictive_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Run prior predictive check for a model specification — prior_predictive_check","title":"Run prior predictive check for a model specification — prior_predictive_check","text":"Run prior predictive check model specification","code":""},{"path":"bisonR/reference/prior_predictive_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run prior predictive check for a model specification — prior_predictive_check","text":"","code":"prior_predictive_check(   formula,   data,   model_type,   plot_type = \"density\",   options = NULL,   priors = NULL )"},{"path":"bisonR/reference/prior_predictive_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run prior predictive check for a model specification — prior_predictive_check","text":"formula Formula model data Data model model_type Type model fit plot_type Type predictive plot show (\"density\" \"marginal\") options List additional information needed predictive plot. Check examples full details. priors List priors model","code":""},{"path":"bisonR/reference/simulate_edge_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates data — simulate_edge_model","title":"Simulates data — simulate_edge_model","text":"Simulates data","code":""},{"path":"bisonR/reference/simulate_edge_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates data — simulate_edge_model","text":"","code":"simulate_edge_model(   model_type,   aggregated,   location_effect = TRUE,   age_diff_effect = TRUE )"},{"path":"bisonR/reference/simulate_edge_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates data — simulate_edge_model","text":"model_type Type data simulate, one \"binary\", \"count\", \"duration\". aggregated TRUE/FALSE indicating whether aggregate dyads . location_effect TRUE/FALSE indicating whether effect location observations. age_diff_effect TRUE/FALSE indicating whether effect age difference observations.","code":""},{"path":"bisonR/reference/simulate_edge_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates data — simulate_edge_model","text":"dataframe format accepted edge weight models.","code":""},{"path":"bisonR/reference/simulate_edge_model_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data for an edge model with mixture components — simulate_edge_model_mixture","title":"Simulate data for an edge model with mixture components — simulate_edge_model_mixture","text":"Simulate data edge model mixture components","code":""},{"path":"bisonR/reference/simulate_edge_model_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data for an edge model with mixture components — simulate_edge_model_mixture","text":"","code":"simulate_edge_model_mixture(model_type, num_components, component_weights)"},{"path":"bisonR/reference/simulate_edge_model_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data for an edge model with mixture components — simulate_edge_model_mixture","text":"model_type Type data simulate, one \"binary\", \"count\", \"duration\". num_components Number mixture components simulation (>=2). component_weights Vector component weightings component. Must sum 1.","code":""},{"path":"bisonR/reference/simulate_edge_model_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data for an edge model with mixture components — simulate_edge_model_mixture","text":"dataframe format accepted edge weight models.","code":""},{"path":"bisonR/reference/summary.dyadic_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a fitted dyadic regression model — summary.dyadic_model","title":"Summary of a fitted dyadic regression model — summary.dyadic_model","text":"Summary fitted dyadic regression model","code":""},{"path":"bisonR/reference/summary.dyadic_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a fitted dyadic regression model — summary.dyadic_model","text":"","code":"# S3 method for dyadic_model summary(object, ci = 0.9, ...)"},{"path":"bisonR/reference/summary.dyadic_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a fitted dyadic regression model — summary.dyadic_model","text":"object S3 dyadic regression model ci Credible interval use summary, based quantiles. ... Additional arguments passed summary calculations.","code":""},{"path":"bisonR/reference/summary.dyadic_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a fitted dyadic regression model — summary.dyadic_model","text":"Returns summary object fitted dyadic regression model.","code":""},{"path":"bisonR/reference/summary.edge_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a edge mixture model — summary.edge_mixture","title":"Summary of a edge mixture model — summary.edge_mixture","text":"Summary edge mixture model","code":""},{"path":"bisonR/reference/summary.edge_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a edge mixture model — summary.edge_mixture","text":"","code":"# S3 method for edge_mixture summary(object, ...)"},{"path":"bisonR/reference/summary.edge_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a edge mixture model — summary.edge_mixture","text":"object S3 edge mixture model ... Additional arguments passed summary calculations.","code":""},{"path":"bisonR/reference/summary.edge_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a edge mixture model — summary.edge_mixture","text":"Returns summary object edge mixture model.","code":""},{"path":"bisonR/reference/summary.edge_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a summary object for an edge model object — summary.edge_model","title":"Generates a summary object for an edge model object — summary.edge_model","text":"Generates summary object edge model object","code":""},{"path":"bisonR/reference/summary.edge_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a summary object for an edge model object — summary.edge_model","text":"","code":"# S3 method for edge_model summary(object, ci = 0.9, transform = TRUE, ...)"},{"path":"bisonR/reference/summary.edge_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a summary object for an edge model object — summary.edge_model","text":"object S3 edge model object summarised. ci Credible interval use summary, based quantiles. transform TRUE FALSE specifying whether transform edge weights internal link function scale. ... Additional arguments","code":""},{"path":"bisonR/reference/summary.nodal_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a fitted nodal regression model — summary.nodal_model","title":"Summary of a fitted nodal regression model — summary.nodal_model","text":"Summary fitted nodal regression model","code":""},{"path":"bisonR/reference/summary.nodal_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a fitted nodal regression model — summary.nodal_model","text":"","code":"# S3 method for nodal_model summary(object, ci = 0.9, ...)"},{"path":"bisonR/reference/summary.nodal_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a fitted nodal regression model — summary.nodal_model","text":"object S3 dyadic regression model ci Credible interval use summary, based quantiles. ... Additional arguments passed summary calculations.","code":""},{"path":"bisonR/news/index.html","id":"bisonr-020","dir":"Changelog","previous_headings":"","what":"bisonR 0.2.0","title":"bisonR 0.2.0","text":"Conjugate models Prior checks Model comparison Directed networks Support missing dyads Mixture models Refactored data processing GBI data conversion Global network metrics Improved documentation Non-random edge weight analysis Threshold degree metrics","code":""},{"path":"bisonR/news/index.html","id":"bisonr-010","dir":"Changelog","previous_headings":"","what":"bisonR 0.1.0","title":"bisonR 0.1.0","text":"Basic feature set implemented (edge models, dyadic nodal regression, basic checks, etc). functions documented. Unit tests configured. R CMD check passing. Getting started page complete.","code":""},{"path":"bisonR/news/index.html","id":"bisonr-0009000","dir":"Changelog","previous_headings":"","what":"bisonR 0.0.0.9000","title":"bisonR 0.0.0.9000","text":"Initialised package.","code":""}]
